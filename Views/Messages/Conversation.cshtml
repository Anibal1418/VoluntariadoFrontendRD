@{
    ViewData["Title"] = "Conversación - Voluntariado Conectado RD";
    Layout = "_DashboardLayout";
    var conversationId = ViewBag.ConversationId as string;
}

<div class="conversation-container" style="height: calc(100vh - 120px);">
    <!-- Conversation Header -->
    <div class="conversation-header bg-white border-bottom p-3 d-flex align-items-center">
        <div class="d-flex align-items-center">
            <a href="/Messages" class="btn btn-outline-secondary me-3">
                <i class="bi bi-arrow-left"></i>
            </a>
            <img src="/images/voluntarios.png" alt="Contact" class="rounded-circle me-3" width="40" height="40" style="object-fit: cover;">
            <div>
                <h6 class="mb-0" id="contact-name">Cargando...</h6>
                <small class="text-muted" id="contact-status">En línea</small>
            </div>
        </div>
        <div class="ms-auto">
            <button class="btn btn-outline-primary btn-sm">
                <i class="bi bi-three-dots-vertical"></i>
            </button>
        </div>
    </div>

    <!-- Messages Area -->
    <div class="messages-area flex-grow-1 p-3 overflow-auto" id="messages-container" style="height: calc(100% - 140px); background: #f8f9fa;">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando mensajes...</span>
            </div>
        </div>
    </div>

    <!-- Message Input -->
    <div class="message-input-container bg-white border-top p-3">
        <form id="message-form" class="d-flex align-items-center">
            <div class="flex-grow-1 me-2">
                <div class="input-group">
                    <input type="text" id="message-input" class="form-control" placeholder="Escribe un mensaje..." autocomplete="off">
                    <button type="button" class="btn btn-outline-secondary" id="attachment-btn">
                        <i class="bi bi-paperclip"></i>
                    </button>
                </div>
            </div>
            <button type="submit" class="btn btn-primary" id="send-btn">
                <i class="bi bi-send"></i>
            </button>
        </form>
    </div>
</div>

<!-- Hidden file input for attachments -->
<input type="file" id="file-input" style="display: none;" accept="image/*,application/pdf,.doc,.docx">

<style>
.conversation-container {
    display: flex;
    flex-direction: column;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.message {
    margin-bottom: 15px;
    max-width: 70%;
}

.message.sent {
    margin-left: auto;
    text-align: right;
}

.message.received {
    margin-right: auto;
}

.message-bubble {
    padding: 10px 15px;
    border-radius: 18px;
    display: inline-block;
    word-wrap: break-word;
}

.message.sent .message-bubble {
    background: #007bff;
    color: white;
}

.message.received .message-bubble {
    background: #e9ecef;
    color: #333;
}

.message-time {
    font-size: 0.75rem;
    color: #6c757d;
    margin-top: 5px;
}

.message-input-container {
    border-top: 1px solid #dee2e6;
}

#message-input {
    border: 1px solid #dee2e6;
    border-radius: 20px;
    padding: 10px 15px;
}

#message-input:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

#send-btn {
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const conversationId = '@Html.Raw(conversationId)';
    const messagesContainer = document.getElementById('messages-container');
    const messageForm = document.getElementById('message-form');
    const messageInput = document.getElementById('message-input');
    const sendBtn = document.getElementById('send-btn');
    const fileInput = document.getElementById('file-input');
    const attachmentBtn = document.getElementById('attachment-btn');

    let currentPage = 1;
    let isLoading = false;

    // Load initial messages
    loadMessages();

    // Handle message form submission
    messageForm.addEventListener('submit', function(e) {
        e.preventDefault();
        sendMessage();
    });

    // Handle attachment button
    attachmentBtn.addEventListener('click', function() {
        fileInput.click();
    });

    // Handle file selection
    fileInput.addEventListener('change', function() {
        if (this.files.length > 0) {
            sendMessage(this.files[0]);
        }
    });

    // Auto-resize message input
    messageInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + 'px';
    });

    function loadMessages() {
        if (isLoading) return;
        isLoading = true;

        fetch(`/Messages/api/conversation/${conversationId}/messages?page=${currentPage}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data) {
                    displayMessages(data.data.messages);
                    updateContactInfo(data.data.otherUser);
                    scrollToBottom();
                }
            })
            .catch(error => {
                console.error('Error loading messages:', error);
                showError('Error al cargar los mensajes');
            })
            .finally(() => {
                isLoading = false;
            });
    }

    function displayMessages(messages) {
        messagesContainer.innerHTML = '';
        
        messages.forEach(message => {
            const messageElement = createMessageElement(message);
            messagesContainer.appendChild(messageElement);
        });
    }

    function createMessageElement(message) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${message.isFromCurrentUser ? 'sent' : 'received'}`;
        
        messageDiv.innerHTML = `
            <div class="message-bubble">
                ${message.content}
            </div>
            <div class="message-time">
                ${formatTime(message.sentAt)}
            </div>
        `;
        
        return messageDiv;
    }

    function sendMessage(file = null) {
        const content = messageInput.value.trim();
        
        if (!content && !file) return;

        const formData = new FormData();
        formData.append('conversationId', conversationId);
        formData.append('content', content);
        formData.append('recipientId', 1); // This should be dynamic
        
        if (file) {
            formData.append('attachment', file);
        }

        sendBtn.disabled = true;
        messageInput.value = '';

        fetch('/Messages/api/send', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Add message to UI immediately
                const newMessage = {
                    content: content,
                    isFromCurrentUser: true,
                    sentAt: new Date().toISOString()
                };
                const messageElement = createMessageElement(newMessage);
                messagesContainer.appendChild(messageElement);
                scrollToBottom();
            } else {
                showError(data.message || 'Error al enviar el mensaje');
            }
        })
        .catch(error => {
            console.error('Error sending message:', error);
            showError('Error al enviar el mensaje');
        })
        .finally(() => {
            sendBtn.disabled = false;
            fileInput.value = '';
        });
    }

    function updateContactInfo(user) {
        document.getElementById('contact-name').textContent = user.name || 'Usuario';
        document.getElementById('contact-status').textContent = 'En línea';
    }

    function scrollToBottom() {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    function formatTime(dateString) {
        const date = new Date(dateString);
        return date.toLocaleTimeString('es-ES', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    }

    function showError(message) {
        // Use toast notification instead of alert
        Toast.error(message);
    }
});
</script>