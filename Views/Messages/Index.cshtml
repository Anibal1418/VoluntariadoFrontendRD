@{
    ViewData["Title"] = "Mensajes";
    Layout = "_Layout";
}

<div class="container-fluid py-4">
    <div class="row h-100">
        <!-- Conversations Sidebar -->
        <div class="col-lg-4 col-md-5">
            <div class="card h-100" style="border-radius: 15px;">
                <div class="card-header border-0 bg-white" style="border-radius: 15px 15px 0 0;">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="bi bi-chat-dots me-2"></i>Mensajes
                        </h5>
                        <div class="d-flex gap-2">
                            <button class="btn btn-sm btn-outline-primary" onclick="refreshConversations()">
                                <i class="bi bi-arrow-clockwise"></i>
                            </button>
                            <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#newMessageModal">
                                <i class="bi bi-plus-lg"></i> Nuevo
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="card-body p-0" style="height: 600px; overflow-y: auto;">
                    <!-- Search Box -->
                    <div class="p-3 border-bottom">
                        <div class="input-group">
                            <input type="text" class="form-control" id="conversationSearch" placeholder="Buscar conversaciones...">
                            <button class="btn btn-outline-secondary" type="button">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Conversations List -->
                    <div id="conversationsList">
                        <!-- Loading spinner -->
                        <div class="text-center p-5" id="conversationsLoading">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Chat Area -->
        <div class="col-lg-8 col-md-7">
            <div class="card h-100" style="border-radius: 15px;">
                <!-- Chat Header -->
                <div class="card-header border-0 bg-white d-none" id="chatHeader" style="border-radius: 15px 15px 0 0;">
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center">
                            <div class="avatar-circle me-3">
                                <img id="chatUserAvatar" src="" alt="Avatar" style="width: 40px; height: 40px; object-fit: cover; border-radius: 50%;">
                            </div>
                            <div>
                                <h6 class="mb-0" id="chatUserName">Usuario</h6>
                                <small class="text-muted" id="chatUserStatus">Desconectado</small>
                            </div>
                        </div>
                        <div class="d-flex gap-2">
                            <button class="btn btn-sm btn-outline-secondary" onclick="toggleChatInfo()">
                                <i class="bi bi-info-circle"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-secondary" onclick="archiveConversation()">
                                <i class="bi bi-archive"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Messages Area -->
                <div class="card-body d-flex flex-column" id="chatBody" style="height: 600px;">
                    <!-- Welcome Message -->
                    <div class="d-flex align-items-center justify-content-center h-100" id="welcomeMessage">
                        <div class="text-center">
                            <i class="bi bi-chat-heart" style="font-size: 4rem; color: #dee2e6;"></i>
                            <h4 class="mt-3 text-muted">Bienvenido a Mensajes</h4>
                            <p class="text-muted">Selecciona una conversación para comenzar a chatear</p>
                        </div>
                    </div>

                    <!-- Messages Container -->
                    <div class="flex-grow-1 overflow-auto d-none" id="messagesContainer" style="max-height: 450px;">
                        <div id="messagesList">
                            <!-- Messages will be loaded here -->
                        </div>
                        
                        <!-- Typing indicator -->
                        <div class="d-none p-2" id="typingIndicator">
                            <div class="d-flex align-items-center">
                                <div class="avatar-circle me-2">
                                    <span class="typing-dots">
                                        <span></span><span></span><span></span>
                                    </span>
                                </div>
                                <small class="text-muted">está escribiendo...</small>
                            </div>
                        </div>
                    </div>

                    <!-- Message Input -->
                    <div class="border-top pt-3 d-none" id="messageInputArea">
                        <form id="messageForm" enctype="multipart/form-data">
                            <div class="input-group">
                                <button type="button" class="btn btn-outline-secondary" id="attachmentBtn">
                                    <i class="bi bi-paperclip"></i>
                                </button>
                                <input type="file" id="attachmentInput" class="d-none" accept="image/*,.pdf,.doc,.docx,.txt">
                                <input type="text" class="form-control" id="messageInput" placeholder="Escribe tu mensaje..." maxlength="2000">
                                <button type="submit" class="btn btn-primary" id="sendBtn">
                                    <i class="bi bi-send"></i>
                                </button>
                            </div>
                        </form>
                        
                        <!-- Attachment Preview -->
                        <div class="mt-2 d-none" id="attachmentPreview">
                            <div class="alert alert-info d-flex align-items-center">
                                <i class="bi bi-file-earmark me-2"></i>
                                <span id="attachmentName">archivo.jpg</span>
                                <button type="button" class="btn-close ms-auto" onclick="removeAttachment()"></button>
                            </div>
                        </div>

                        <!-- Reply Preview -->
                        <div class="mt-2 d-none" id="replyPreview">
                            <div class="alert alert-secondary d-flex align-items-center">
                                <i class="bi bi-reply me-2"></i>
                                <div class="flex-grow-1">
                                    <small class="fw-bold" id="replyUserName">Usuario</small>
                                    <div id="replyContent">Contenido del mensaje...</div>
                                </div>
                                <button type="button" class="btn-close" onclick="removeReply()"></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- New Message Modal -->
<div class="modal fade" id="newMessageModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Nuevo Mensaje</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="newMessageForm">
                    <div class="mb-3">
                        <label for="recipientSearch" class="form-label">Destinatario</label>
                        <input type="text" class="form-control" id="recipientSearch" placeholder="Buscar usuario...">
                        <div id="recipientsList" class="mt-2"></div>
                        <input type="hidden" id="selectedRecipientId">
                    </div>
                    <div class="mb-3">
                        <label for="initialMessage" class="form-label">Mensaje</label>
                        <textarea class="form-control" id="initialMessage" rows="4" placeholder="Escribe tu mensaje..." maxlength="2000" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="sendNewMessage()">Enviar</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/microsoft-signalr@6.0.1/dist/browser/signalr.min.js"></script>

<script>
let currentConversation = null;
let currentUser = null;
let connection = null;
let conversations = [];
let replyToMessage = null;
let typingTimeout = null;

$(document).ready(function() {
    initializeSignalR();
    loadConversations();
    setupEventHandlers();
    getCurrentUser();
});

function initializeSignalR() {
    connection = new signalR.HubConnectionBuilder()
        .withUrl("/notificationHub")
        .build();

    connection.start().then(function () {
        console.log('SignalR Connected');
        
        // Listen for new messages
        connection.on("ReceiveMessage", function (message) {
            if (currentConversation && message.conversationId === currentConversation) {
                displayMessage(message);
                scrollToBottom();
            }
            updateConversationsList();
        });

        // Listen for typing indicators
        connection.on("UserTyping", function (data) {
            if (currentConversation && data.conversationId === currentConversation) {
                showTypingIndicator(data.isTyping);
            }
        });

        // Listen for message read status
        connection.on("MessageRead", function (data) {
            updateMessageReadStatus(data.messageId, data.readAt);
        });

    }).catch(function (err) {
        console.error('SignalR Connection Error: ', err.toString());
    });
}

function setupEventHandlers() {
    // Message form submission
    $('#messageForm').on('submit', function(e) {
        e.preventDefault();
        sendMessage();
    });

    // Typing indicator
    $('#messageInput').on('input', function() {
        if (currentConversation) {
            handleTyping();
        }
    });

    // Attachment button
    $('#attachmentBtn').on('click', function() {
        $('#attachmentInput').click();
    });

    // Attachment selection
    $('#attachmentInput').on('change', function() {
        handleAttachmentSelection();
    });

    // Conversation search
    $('#conversationSearch').on('input', function() {
        filterConversations();
    });
}

async function loadConversations() {
    try {
        const response = await fetch('/Messages/api/conversations');
        const result = await response.json();
        
        if (result.success && result.data) {
            conversations = result.data.conversations;
            displayConversations(conversations);
        } else {
            console.error('Error loading conversations:', result.message);
        }
    } catch (error) {
        console.error('Error loading conversations:', error);
    } finally {
        $('#conversationsLoading').hide();
    }
}

function displayConversations(convList) {
    const container = $('#conversationsList');
    container.empty();

    if (convList.length === 0) {
        container.html(`
            <div class="text-center p-4">
                <i class="bi bi-chat" style="font-size: 2rem; color: #dee2e6;"></i>
                <p class="text-muted mt-2">No hay conversaciones</p>
            </div>
        `);
        return;
    }

    convList.forEach(conv => {
        const isActive = currentConversation === conv.id;
        const lastMessage = conv.lastMessage ? 
            (conv.lastMessage.content.length > 50 ? 
                conv.lastMessage.content.substring(0, 50) + '...' : 
                conv.lastMessage.content) : 
            'Iniciar conversación';

        const conversationHtml = `
            <div class="conversation-item p-3 border-bottom ${isActive ? 'bg-light' : ''}" 
                 data-conversation-id="${conv.id}" onclick="openConversation('${conv.id}')">
                <div class="d-flex align-items-center">
                    <div class="position-relative me-3">
                        <div class="avatar-circle">
                            ${conv.otherUser.imagenUrl ? 
                                `<img src="${conv.otherUser.imagenUrl}" alt="Avatar" style="width: 45px; height: 45px; object-fit: cover; border-radius: 50%;">` :
                                `<span class="avatar-initials" style="font-size: 16px;">${(conv.otherUser.nombre.charAt(0) + conv.otherUser.apellido.charAt(0)).toUpperCase()}</span>`
                            }
                        </div>
                        ${conv.isOnline ? '<span class="online-indicator"></span>' : ''}
                    </div>
                    <div class="flex-grow-1 min-width-0">
                        <div class="d-flex justify-content-between align-items-start">
                            <h6 class="mb-1 text-truncate">${conv.otherUser.nombre} ${conv.otherUser.apellido}</h6>
                            <small class="text-muted">${formatTime(conv.lastMessageAt)}</small>
                        </div>
                        <p class="mb-0 text-muted small text-truncate">${lastMessage}</p>
                    </div>
                    ${conv.hasUnread ? `<span class="badge bg-primary rounded-pill">${conv.unreadCount}</span>` : ''}
                </div>
            </div>
        `;
        container.append(conversationHtml);
    });
}

async function openConversation(conversationId) {
    currentConversation = conversationId;
    
    // Update UI
    $('.conversation-item').removeClass('bg-light');
    $(`[data-conversation-id="${conversationId}"]`).addClass('bg-light');
    
    $('#welcomeMessage').addClass('d-none');
    $('#chatHeader').removeClass('d-none');
    $('#messagesContainer').removeClass('d-none');
    $('#messageInputArea').removeClass('d-none');
    
    // Load conversation details
    await loadConversationMessages(conversationId);
    
    // Mark messages as read
    await markMessagesAsRead(conversationId);
    
    // Join SignalR group
    if (connection) {
        await connection.invoke("JoinConversation", conversationId);
    }
}

async function loadConversationMessages(conversationId) {
    try {
        const response = await fetch(`/Messages/api/conversation/${conversationId}/messages`);
        const result = await response.json();
        
        if (result.success && result.data) {
            const data = result.data;
            
            // Update header
            updateChatHeader(data.otherUser, data.isOtherUserOnline, data.otherUserLastSeen);
            
            // Display messages
            displayMessages(data.messages);
            
            scrollToBottom();
        } else {
            console.error('Error loading messages:', result.message);
        }
    } catch (error) {
        console.error('Error loading messages:', error);
    }
}

function updateChatHeader(otherUser, isOnline, lastSeen) {
    $('#chatUserName').text(`${otherUser.nombre} ${otherUser.apellido}`);
    
    if (otherUser.imagenUrl) {
        $('#chatUserAvatar').attr('src', otherUser.imagenUrl).show();
    } else {
        $('#chatUserAvatar').hide();
    }
    
    const statusText = isOnline ? 'En línea' : 
        (lastSeen ? `Visto ${formatTime(lastSeen)}` : 'Desconectado');
    const statusClass = isOnline ? 'text-success' : 'text-muted';
    
    $('#chatUserStatus').text(statusText).attr('class', `${statusClass} small`);
}

function displayMessages(messages) {
    const container = $('#messagesList');
    container.empty();
    
    messages.forEach(message => {
        displayMessage(message);
    });
}

function displayMessage(message) {
    const isFromCurrentUser = message.isFromCurrentUser;
    const alignment = isFromCurrentUser ? 'justify-content-end' : 'justify-content-start';
    const bgClass = isFromCurrentUser ? 'bg-primary text-white' : 'bg-light';
    const maxWidth = isFromCurrentUser ? 'max-width: 70%;' : 'max-width: 70%;';
    
    let messageContent = message.formattedContent || message.content;
    
    // Handle attachments
    if (message.attachmentUrl) {
        if (message.type === 2) { // Image
            messageContent += `<br><img src="${message.attachmentUrl}" alt="Imagen" class="img-fluid mt-2" style="max-width: 200px; border-radius: 8px;">`;
        } else { // File
            messageContent += `<br><a href="${message.attachmentUrl}" target="_blank" class="text-decoration-none">
                <i class="bi bi-file-earmark"></i> ${message.attachmentFileName}
            </a>`;
        }
    }
    
    // Handle replies
    let replyContent = '';
    if (message.replyToMessage) {
        replyContent = `
            <div class="reply-context mb-2 p-2 bg-opacity-25 ${isFromCurrentUser ? 'bg-white' : 'bg-secondary'}" style="border-radius: 6px; font-size: 0.8em;">
                <div class="fw-bold">${message.replyToMessage.sender.nombre}</div>
                <div class="text-truncate">${message.replyToMessage.content}</div>
            </div>
        `;
    }
    
    const messageHtml = `
        <div class="d-flex ${alignment} mb-3" data-message-id="${message.id}">
            <div class="message-bubble ${bgClass} p-3" style="border-radius: 15px; ${maxWidth}">
                ${replyContent}
                <div class="message-content">${messageContent}</div>
                <div class="message-time mt-1">
                    <small class="opacity-75">${message.timeAgo}</small>
                    ${message.editedAt ? '<i class="bi bi-pencil-square ms-1" title="Editado"></i>' : ''}
                    ${isFromCurrentUser ? (message.isRead ? '<i class="bi bi-check2-all text-info ms-1" title="Leído"></i>' : '<i class="bi bi-check2 ms-1" title="Enviado"></i>') : ''}
                </div>
            </div>
            ${isFromCurrentUser ? `
                <div class="dropdown ms-2">
                    <button class="btn btn-sm btn-link text-muted" data-bs-toggle="dropdown">
                        <i class="bi bi-three-dots-vertical"></i>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" onclick="replyToMessage(${message.id})">
                            <i class="bi bi-reply me-2"></i>Responder
                        </a></li>
                        <li><a class="dropdown-item" href="#" onclick="editMessage(${message.id})">
                            <i class="bi bi-pencil me-2"></i>Editar
                        </a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item text-danger" href="#" onclick="deleteMessage(${message.id})">
                            <i class="bi bi-trash me-2"></i>Eliminar
                        </a></li>
                    </ul>
                </div>
            ` : `
                <div class="dropdown ms-2">
                    <button class="btn btn-sm btn-link text-muted" data-bs-toggle="dropdown">
                        <i class="bi bi-three-dots-vertical"></i>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" onclick="replyToMessage(${message.id})">
                            <i class="bi bi-reply me-2"></i>Responder
                        </a></li>
                    </ul>
                </div>
            `}
        </div>
    `;
    
    $('#messagesList').append(messageHtml);
}

async function sendMessage() {
    const content = $('#messageInput').val().trim();
    if (!content && !$('#attachmentInput')[0].files.length) return;
    
    const formData = new FormData();
    const recipientId = currentConversation.split('_').find(id => id != currentUser.id);
    
    formData.append('RecipientId', recipientId);
    formData.append('Content', content);
    formData.append('Type', '1'); // Text
    
    if (replyToMessage) {
        formData.append('ReplyToMessageId', replyToMessage.toString());
    }
    
    if ($('#attachmentInput')[0].files.length) {
        formData.append('Attachment', $('#attachmentInput')[0].files[0]);
    }
    
    try {
        const response = await fetch('/Messages/api/send', {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        
        if (result.success) {
            // Clear input
            $('#messageInput').val('');
            removeAttachment();
            removeReply();
            
            // Message will be displayed via SignalR
            scrollToBottom();
            
            // Stop typing indicator
            if (connection) {
                await connection.invoke("StopTyping", parseInt(recipientId), currentConversation);
            }
        } else {
            alert('Error sending message: ' + result.message);
        }
    } catch (error) {
        console.error('Error sending message:', error);
        alert('Error sending message');
    }
}

async function markMessagesAsRead(conversationId) {
    try {
        await fetch(`/Messages/api/conversation/${conversationId}/read`, {
            method: 'PUT'
        });
        
        // Update conversations list to remove unread indicators
        updateConversationsList();
    } catch (error) {
        console.error('Error marking messages as read:', error);
    }
}

function handleAttachmentSelection() {
    const file = $('#attachmentInput')[0].files[0];
    if (file) {
        $('#attachmentName').text(file.name);
        $('#attachmentPreview').removeClass('d-none');
    }
}

function removeAttachment() {
    $('#attachmentInput').val('');
    $('#attachmentPreview').addClass('d-none');
}

function replyToMessage(messageId) {
    const messageElement = $(`[data-message-id="${messageId}"]`);
    const content = messageElement.find('.message-content').text();
    const sender = $('#chatUserName').text();
    
    replyToMessage = messageId;
    $('#replyUserName').text(sender);
    $('#replyContent').text(content.substring(0, 100) + (content.length > 100 ? '...' : ''));
    $('#replyPreview').removeClass('d-none');
    
    $('#messageInput').focus();
}

function removeReply() {
    replyToMessage = null;
    $('#replyPreview').addClass('d-none');
}

async function handleTyping() {
    if (!currentConversation || !connection) return;
    
    const recipientId = currentConversation.split('_').find(id => id != currentUser.id);
    
    // Send typing start
    await connection.invoke("StartTyping", parseInt(recipientId), currentConversation);
    
    // Clear previous timeout
    if (typingTimeout) {
        clearTimeout(typingTimeout);
    }
    
    // Send typing stop after 3 seconds
    typingTimeout = setTimeout(async () => {
        await connection.invoke("StopTyping", parseInt(recipientId), currentConversation);
    }, 3000);
}

function showTypingIndicator(isTyping) {
    if (isTyping) {
        $('#typingIndicator').removeClass('d-none');
        scrollToBottom();
    } else {
        $('#typingIndicator').addClass('d-none');
    }
}

function scrollToBottom() {
    const container = $('#messagesContainer');
    container.scrollTop(container[0].scrollHeight);
}

function formatTime(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now - date;
    
    if (diff < 60000) { // Less than 1 minute
        return 'ahora';
    } else if (diff < 3600000) { // Less than 1 hour
        return Math.floor(diff / 60000) + 'm';
    } else if (diff < 86400000) { // Less than 1 day
        return Math.floor(diff / 3600000) + 'h';
    } else {
        return date.toLocaleDateString('es-ES');
    }
}

async function updateConversationsList() {
    await loadConversations();
}

async function refreshConversations() {
    $('#conversationsLoading').show();
    await loadConversations();
}

function filterConversations() {
    const searchTerm = $('#conversationSearch').val().toLowerCase();
    const filteredConversations = conversations.filter(conv => 
        (conv.otherUser.nombre + ' ' + conv.otherUser.apellido).toLowerCase().includes(searchTerm) ||
        (conv.lastMessage && conv.lastMessage.content.toLowerCase().includes(searchTerm))
    );
    displayConversations(filteredConversations);
}

async function getCurrentUser() {
    // This should be implemented to get current user info from session/API
    // For now, we'll extract from conversation IDs
    currentUser = { id: parseInt($('#currentUserId').val() || '1') }; // Fallback
}

async function sendNewMessage() {
    const recipientId = $('#selectedRecipientId').val();
    const message = $('#initialMessage').val().trim();
    
    if (!recipientId || !message) {
        alert('Por favor selecciona un destinatario y escribe un mensaje');
        return;
    }
    
    try {
        const response = await fetch('/Messages/api/conversation/start', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                recipientId: parseInt(recipientId),
                initialMessage: message
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            $('#newMessageModal').modal('hide');
            $('#newMessageForm')[0].reset();
            $('#selectedRecipientId').val('');
            
            // Refresh conversations and open the new one
            await updateConversationsList();
            await openConversation(result.data.id);
        } else {
            alert('Error starting conversation: ' + result.message);
        }
    } catch (error) {
        console.error('Error starting conversation:', error);
        alert('Error starting conversation');
    }
}
</script>

<style>
.conversation-item {
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.conversation-item:hover {
    background-color: #f8f9fa !important;
}

.avatar-circle {
    width: 45px;
    height: 45px;
    border-radius: 50%;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #e9ecef;
    position: relative;
}

.avatar-initials {
    font-size: 16px;
    font-weight: bold;
    color: #6c757d;
}

.online-indicator {
    position: absolute;
    bottom: 2px;
    right: 2px;
    width: 12px;
    height: 12px;
    background: #28a745;
    border: 2px solid white;
    border-radius: 50%;
}

.message-bubble {
    word-wrap: break-word;
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
}

.typing-dots {
    display: inline-block;
}

.typing-dots span {
    display: inline-block;
    width: 4px;
    height: 4px;
    border-radius: 50%;
    background-color: #999;
    margin: 0 1px;
    animation: typing 1.4s infinite ease-in-out both;
}

.typing-dots span:nth-child(1) { animation-delay: -0.32s; }
.typing-dots span:nth-child(2) { animation-delay: -0.16s; }

@keyframes typing {
    0%, 80%, 100% {
        transform: scale(0);
        opacity: 0.5;
    }
    40% {
        transform: scale(1);
        opacity: 1;
    }
}

.reply-context {
    border-left: 3px solid currentColor;
    padding-left: 8px !important;
}

#messagesContainer {
    scrollbar-width: thin;
    scrollbar-color: #dee2e6 transparent;
}

#messagesContainer::-webkit-scrollbar {
    width: 6px;
}

#messagesContainer::-webkit-scrollbar-track {
    background: transparent;
}

#messagesContainer::-webkit-scrollbar-thumb {
    background-color: #dee2e6;
    border-radius: 3px;
}

#messagesContainer::-webkit-scrollbar-thumb:hover {
    background-color: #adb5bd;
}
</style>