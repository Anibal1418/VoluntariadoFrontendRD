@using VoluntariosConectadosRD.Models.DTOs
@{
    ViewData["Title"] = "Gestión de Usuarios - Administración";
    Layout = "_DashboardLayout";
}

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="dashboard-title mb-0" style="font-size:2.2rem; font-weight:700; color:#fff; background:linear-gradient(135deg, #dc3545, #c82333); border-radius:12px; padding:18px 32px; box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);">GESTIÓN DE USUARIOS</h2>
    </div>

    <!-- Search and Actions Row -->
    <div class="card border-0 shadow-sm mb-4" style="border-radius: 15px;">
        <div class="card-body p-4">
            <div class="row align-items-center">
                <div class="col-md-6 mb-3 mb-md-0">
                    <div class="input-group">
                        <span class="input-group-text bg-light border-end-0">
                            <i class="bi bi-search text-muted"></i>
                        </span>
                        <input type="text" class="form-control border-start-0" id="searchInput" placeholder="Buscar usuarios por nombre, email o rol..." style="border-radius: 0 8px 8px 0;" value="@(ViewBag.SearchQuery ?? "")" onkeypress="if(event.key==='Enter'){buscarUsuarios();}">
                    </div>
                </div>
                <div class="col-md-6 text-md-end">
                    <button class="btn btn-success me-2" onclick="exportarUsuarios()">
                        <i class="bi bi-download me-2"></i>Exportar
                    </button>
                    <button class="btn btn-primary" onclick="agregarUsuario()">
                        <i class="bi bi-person-plus me-2"></i>Agregar Usuario
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Users Table -->
    <div class="card border-0 shadow-sm" style="border-radius: 15px;">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="usersTable">
                    <thead class="table-dark">
                        <tr>
                            <th style="border-radius: 15px 0 0 0;">
                                <input type="checkbox" class="form-check-input" id="selectAll">
                            </th>
                            <th>Usuario</th>
                            <th>Email</th>
                            <th>Rol</th>
                            <th>Estado</th>
                            <th>Fecha Registro</th>
                            <th>Último Acceso</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var volunteersData = ViewBag.VolunteersData as PaginatedResult<AdminVolunteerDto>;
                        }
                        @if (volunteersData != null && volunteersData.Items.Any())
                        {
                            @foreach (var volunteer in volunteersData.Items)
                            {
                                <tr>
                                    <td><input type="checkbox" class="form-check-input user-checkbox" data-user-id="@volunteer.Id"></td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <img src="@(string.IsNullOrEmpty(volunteer.ImagenUrl) ? "https://randomuser.me/api/portraits/men/32.jpg" : volunteer.ImagenUrl)" alt="Avatar" class="rounded-circle me-3" width="40" height="40">
                                            <div>
                                                <div class="fw-bold">@volunteer.Nombre @volunteer.Apellido</div>
                                                <small class="text-muted">
                                                    @if (volunteer.HorasVoluntariado > 0)
                                                    {
                                                        @($"Voluntario - {volunteer.HorasVoluntariado} hrs")
                                                    }
                                                    else
                                                    {
                                                        @("Voluntario Nuevo")
                                                    }
                                                </small>
                                            </div>
                                        </div>
                                    </td>
                                    <td>@volunteer.Email</td>
                                    <td><span class="badge bg-primary">Voluntario</span></td>
                                    <td>
                                        @switch (volunteer.Estado)
                                        {
                                            case "Activo":
                                                <span class="badge bg-success">Activo</span>
                                                break;
                                            case "Inactivo":
                                                <span class="badge bg-secondary">Inactivo</span>
                                                break;
                                            case "Suspendido":
                                                <span class="badge bg-danger">Suspendido</span>
                                                break;
                                            case "PendienteVerificacion":
                                                <span class="badge bg-warning">Pendiente</span>
                                                break;
                                            default:
                                                <span class="badge bg-secondary">@volunteer.Estado</span>
                                                break;
                                        }
                                    </td>
                                    <td>@volunteer.FechaRegistro.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        @if (volunteer.UltimaActividad.HasValue)
                                        {
                                            var timeDiff = DateTime.UtcNow - volunteer.UltimaActividad.Value;
                                            if (timeDiff.TotalDays < 1)
                                            {
                                                @($"Hace {(int)timeDiff.TotalHours} horas")
                                            }
                                            else if (timeDiff.TotalDays < 30)
                                            {
                                                @($"Hace {(int)timeDiff.TotalDays} días")
                                            }
                                            else
                                            {
                                                @volunteer.UltimaActividad.Value.ToString("dd/MM/yyyy")
                                            }
                                        }
                                        else
                                        {
                                            @("Sin actividad")
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" onclick="editarUsuario(@volunteer.Id)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            @if (volunteer.Estado == "Activo")
                                            {
                                                <button class="btn btn-sm btn-outline-warning" onclick="bloquearUsuario(@volunteer.Id)" title="Suspender usuario">
                                                    <i class="bi bi-lock"></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-sm btn-outline-success" onclick="activarUsuario(@volunteer.Id)" title="Activar usuario">
                                                    <i class="bi bi-unlock"></i>
                                                </button>
                                            }
                                            <button class="btn btn-sm btn-outline-danger" onclick="eliminarUsuario(@volunteer.Id)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center py-4">
                                    <div class="text-muted">
                                        <i class="bi bi-people fs-1 d-block mb-2"></i>
                                        @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage as string))
                                        {
                                            <p>@ViewBag.ErrorMessage</p>
                                        }
                                        else
                                        {
                                            <p>No se encontraron voluntarios.</p>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Pagination -->
    @{
        var currentPage = ViewBag.CurrentPage as int? ?? 1;
        var pageSize = ViewBag.PageSize as int? ?? 10;
        var searchQuery = ViewBag.SearchQuery as string;
    }
    @if (volunteersData != null && volunteersData.TotalCount > 0)
    {
        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="text-muted">
                @{
                    var startItem = ((currentPage - 1) * pageSize) + 1;
                    var endItem = Math.Min(currentPage * pageSize, volunteersData.TotalCount);
                }
                Mostrando @startItem-@endItem de @volunteersData.TotalCount usuarios
            </div>
            
            @if (volunteersData.TotalPages > 1)
            {
                <nav aria-label="Paginación de usuarios">
                    <ul class="pagination mb-0">
                        <li class="page-item @(volunteersData.HasPreviousPage ? "" : "disabled")">
                            @if (volunteersData.HasPreviousPage)
                            {
                                <a class="page-link" href="@Url.Action("VoluntariosAdmin", new { page = currentPage - 1, pageSize = pageSize, search = searchQuery })">Anterior</a>
                            }
                            else
                            {
                                <span class="page-link">Anterior</span>
                            }
                        </li>
                        
                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(volunteersData.TotalPages, currentPage + 2); i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("VoluntariosAdmin", new { page = i, pageSize = pageSize, search = searchQuery })">@i</a>
                            </li>
                        }
                        
                        @if (currentPage + 2 < volunteersData.TotalPages)
                        {
                            <li class="page-item">
                                <span class="page-link">...</span>
                            </li>
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("VoluntariosAdmin", new { page = volunteersData.TotalPages, pageSize = pageSize, search = searchQuery })">@volunteersData.TotalPages</a>
                            </li>
                        }
                        
                        <li class="page-item @(volunteersData.HasNextPage ? "" : "disabled")">
                            @if (volunteersData.HasNextPage)
                            {
                                <a class="page-link" href="@Url.Action("VoluntariosAdmin", new { page = currentPage + 1, pageSize = pageSize, search = searchQuery })">Siguiente</a>
                            }
                            else
                            {
                                <span class="page-link">Siguiente</span>
                            }
                        </li>
                    </ul>
                </nav>
            }
        </div>
    }
</div>

<style>
    .table th {
        border-top: none;
        font-weight: 600;
        font-size: 0.9rem;
    }
    
    .table td {
        vertical-align: middle;
        border-top: 1px solid #f8f9fa;
    }
    
    .table tbody tr:hover {
        background-color: #f8f9fa;
    }
    
    .btn-group .btn {
        border-radius: 6px;
        margin: 0 1px;
    }
    
    .pagination .page-link {
        border-radius: 8px;
        margin: 0 2px;
        border: none;
        color: #6c757d;
        font-weight: 500;
    }
    
    .pagination .page-item.active .page-link {
        background: linear-gradient(135deg, #dc3545, #c82333);
        border: none;
    }
</style>

<script>
    // Select all functionality
    document.getElementById('selectAll').addEventListener('change', function() {
        const checkboxes = document.querySelectorAll('.user-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
        });
    });

    // Search functionality
    document.getElementById('searchInput').addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const rows = document.querySelectorAll('#usersTable tbody tr');
        
        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            row.style.display = text.includes(searchTerm) ? '' : 'none';
        });
    });

    function editarUsuario(id) {
        // Redirect to user profile/edit page
        window.location.href = '/Dashboard/VolunteerDetails/' + id;
    }

    async function bloquearUsuario(id) {
        if (confirm('¿Está seguro de que desea bloquear este usuario?')) {
            try {
                const response = await fetch(`/api/Admin/users/${id}/status`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ status: 3 }) // 3 = Suspendido
                });

                if (response.ok) {
                    Toast.success('Usuario bloqueado exitosamente');
                    setTimeout(() => location.reload(), 1500); // Reload page to update status
                } else {
                    Toast.error('Error al bloquear usuario');
                }
            } catch (error) {
                Toast.error('Error de conexión al bloquear usuario');
            }
        }
    }

    async function desbloquearUsuario(id) {
        if (confirm('¿Está seguro de que desea desbloquear este usuario?')) {
            try {
                const response = await fetch(`/api/Admin/users/${id}/status`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ status: 1 }) // 1 = Activo
                });

                if (response.ok) {
                    Toast.success('Usuario desbloqueado exitosamente');
                    setTimeout(() => location.reload(), 1500); // Reload page to update status
                } else {
                    Toast.error('Error al desbloquear usuario');
                }
            } catch (error) {
                Toast.error('Error de conexión al desbloquear usuario');
            }
        }
    }

    async function eliminarUsuario(id) {
        if (confirm('¿Está seguro de que desea eliminar este usuario? Esta acción no se puede deshacer.')) {
            try {
                const response = await fetch(`/api/Admin/users/${id}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    Toast.success('Usuario eliminado exitosamente');
                    setTimeout(() => location.reload(), 1500); // Reload page to remove user
                } else {
                    Toast.error('Error al eliminar usuario');
                }
            } catch (error) {
                Toast.error('Error de conexión al eliminar usuario');
            }
        }
    }

    function agregarUsuario() {
        // Redirect to user registration
        window.location.href = '/Account/Registro';
    }

    function exportarUsuarios() {
        // Download users as CSV/Excel
        const searchQuery = '@(ViewBag.SearchQuery ?? "")';
        let url = '/Admin/ExportUsers';
        if (searchQuery) {
            url += '?search=' + encodeURIComponent(searchQuery);
        }
        window.open(url, '_blank');
    }
</script> 
